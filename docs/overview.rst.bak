DSP Overview
------------

This section provides an introduction to DSP: Decompositions for Structured Programming. DSP is an object-oriented open-source software package written in C++ for solving structured programming problems. The current version of DSP implements different decomposition methods for solving *stochastic mixed-integer programming* problems.

Stochastic Mixed-Integer Programming
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Stochastic mixed-integer programming (SMIP) is an optimization modeling framework for problems that involve mixed-integer decision variables and uncertain parameters. We considers the following two-stage SMIP problem:

.. math::

   z := \min_x \left\{ c^T x + \mathbb{E}_\xi\left[Q(x,\xi)\right] :\; A x = b,\; x \in X \right\},
   
where the scenario recourse function

.. math::

   Q(x,\xi) := \min_y\; \{q(\xi)^T y :\; W(\xi) y = h(\xi) - T(\xi) x, \; y \in Y\}.

We assume that the random parameter :math:`\xi` follows a discrete distribution with finite support :math:`\{\xi^1, \dots, \xi^S\}` and corresponding probabilities :math:`p_1,\dots,p_S` (continuous distributions can be handled by using a sample-average approximation).

.. note:: The sets :math:`X \subseteq \mathbb{R}_+^{n_1}` and :math:`Y \subseteq \mathbb{R}_+^{n_2}` represent integer restrictions on a subset of the decision variables :math:`x` and :math:`y`, respectively.

The first-stage problem data comprises :math:`A \in \mathbb{R}^{m_1\times n_1}, b\in \mathbb{R}^{m_1}`, and :math:`c\in \mathbb{R}^{n_1}`.  The second-stage data are given by :math:`T(\xi^s)\in \mathbb{R}^{m_2 \times n_1}, W(\xi^s)\in \mathbb{R}^{m_2 \times n_2}, h(\xi^s) \in \mathbb{R}^{m_2}`, and :math:`q(\xi^s) \in \mathbb{R}^{n_2}`. For simplicity, we use the notation :math:`(T_s, W_s, h_s, q_s)` for :math:`s\in \mathcal{S} := \{1,\dots,S\}`.

Dual Decomposition
******************

Dual decomposition considers SMIP of the extensive form

.. math::
   :label: DDEF

   z = \min_{x_s,y_s} \quad & \sum_{s\in\mathcal{S}} p_s \left( c^T x_s + q_s^T y_s \right) \\
   \text{s.t.} \quad
   & \sum_{s\in\mathcal{S}} H_s x_s = 0 \quad \textit{(Nonanticipativity constraint)} \\
   & (x_s, y_s) \in G_s, \quad \forall s\in\mathcal{S}

where the scenario feasibility set is defined as

.. math::

  G_s := \{(x_s, y_s) \;:\; A x_s = b, \; T_s x_s + W_s y_s = h_s, \; x_s \in X, \; y_s \in Y\},

the *nonanticipativity* constraints represents the equations :math:`x_1 = x_S` and :math:`x_s = x_{s-1}` for :math:`s=2,\dots,S`, and :math:`H_s` is a suitable :math:`S\cdot n_1 \times n_1` matrix. 

.. note:: SMIP may not have relatively complete recourse. Without this property, there can exist :math:`(\hat x,\hat y)` such that :math:`(\hat x,\hat y) \in G_s` and :math:`(\hat x,\hat y) \notin G_{s'}` for :math:`s\neq s'`. 

We apply a Lagrangian relaxation of these constraints to obtain the Lagrangian dual function of :eq:`DDEF`: 

.. math::

   D(\lambda) := \min_{x_s,y_s} \left\{ \sum_{s\in\mathcal{S}} L_s(x_s,y_s,\lambda) : (x_s,y_s) \in G_s,\; \forall s\in\mathcal{S} \right\},

where 

.. math::

   L_s(x_s,y_s,\lambda) := p_s \left(c^T x_s + q_s^T y_s\right) + \lambda^T (H_s x_s). 

For fixed :math:`\lambda`, the Lagrangian dual function can be decomposed as

.. math::

   D(\lambda) = \displaystyle\sum_{s\in\mathcal{S}} D_s(\lambda),

where

.. math::

   D_s(\lambda) := \min_{x_s,y_s} \left\{ L_s(x_s,y_s,\lambda) : (x_s,y_s) \in G_s \right\}.

We thus seek to obtain the best lower bound for :eq:`DDEF` by solving the maximization problem (the Lagrangian dual problem):

.. math::

  z_\text{LD} := \max_{\lambda} \sum_{s\in\mathcal{S}} D_s(\lambda).


Benders Decomposition
*********************

Benders decomposition considers SMIP of the form

.. math::
  \min \quad & c^T x + \sum_{s\in \widetilde{\mathcal{S}}} p_s q_s^T y_s + \theta\\
   \text{s.t.} \quad
   & A x = b, \; x \in X \\
   & T_s x + W_s y_s = h_s, \; y_s \in Y, \; \forall s\in \widetilde{\mathcal{S}}, \\
   & \theta \geq \sum_{s\in S\backslash\widetilde{\mathcal{S}}} p_s Q(x,\omega_s),

where :math:`\widetilde{\mathcal{S}}` is a subset of :math:`\mathcal{S}` given by user. The method performs outer-approximation of the recourse function :math:`Q(x,\omega_s)` by iteratively adding a set of linear inequalities. DSP implements a standard Benders decomposition method for solving SMIP problems with first-stage mixed-integer variables.

.. warning:: The second-stage integrality is relaxed in DSP solution.

